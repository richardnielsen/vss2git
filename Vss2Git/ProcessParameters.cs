using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace Hpdi.Vss2Git
{

    /// <summary>The data object for hold parameters for how the conversion
    /// processor should behave</summary>
	class ProcessParameters
	{

		/// <summary>Default constructor</summary>
		public ProcessParameters ()
		{
            Clear ();
		}

        /// <summary>Get/Set the option to auto-execute</summary>
        public bool AutoExecute { get; set; }

		/// <summary>Get/Set the directory folder to the srcsafe.ini file</summary>
		public string VssDirectory { get; set; }

		/// <summary>Get/Set the project path within the srcsafe database</summary>
		public string VssProject { get; set; }

		/// <summary>Get/Set the files to exclude from processing</summary>
		public string VssExcludePaths { get; set; }

		/// <summary>Get/Set the root folder for the git repository</summary>
		public string GitDirectory { get; set; }

		/// <summary>Get/Set the email domain to use for all VSS user names</summary>
		public string EmailDomain { get; set; }

		/// <summary>Get/Set the log file path</summary>
		public string LogFile { get; set; }

        /// <summary>Get/Set the email domain to use for all VSS users</summary>
        public string DefaultComment { get; set; }

        /// <summary>Get/Set the option to transcode comments</summary>
        public bool TranscodeCommentsUtf8 { get; set; }

		/// <summary>Get/Set the option to force annotated tags</summary>
		public bool ForceAnnotatedTags { get; set; }

        /// <summary>Get/Set the option to ignore any errors generated by Git</summary>
        public bool IgnoreGitErrors { get; set; }

		/// <summary>Get/Set the amount in seconds between any comments to combine
        /// into a single revision within git</summary>
		public double AnyCommentSeconds { get; set; }

		/// <summary>Get/Set the amount in seconds between the same comments to
        /// combine into a single revision within git</summary>
		public double SameCommentSeconds { get; set; }

        /// <summary>Get/Set the Encoding to use during process for files generated</summary>
        public Encoding DataEncoding { get; set; }

        /// <summary>Reset all the properties to their defaults</summary>
        public void Clear ()
        {
            AutoExecute = false;
            VssDirectory = "";
            VssProject = "";
            VssExcludePaths = "";
            GitDirectory = Environment.CurrentDirectory;
            EmailDomain = "";
            LogFile = Path.Combine ( Environment.GetFolderPath ( Environment.SpecialFolder.MyDocuments ), "Vss2Git.log" );
            DefaultComment = "";
            TranscodeCommentsUtf8 = true;
            ForceAnnotatedTags = true;
            IgnoreGitErrors = false;
            AnyCommentSeconds = 30;
            SameCommentSeconds = 600;
            DataEncoding = Encoding.Default;
        }

        /// <summary>Load the parameters from a parsed command line</summary>
        /// <param name="CmdLine">a CommandLineParser which contains any related parameters</param>
        public void Load ( CommandLineParser CmdLine )
        {
            bool b;
            double d;

            // setup defaults first
            this.Clear ();

            var E = CmdLine.Parameters.GetEnumerator ();
            while ( E.MoveNext () )
            {
                CommandLineParameter cp = E.Current.Value;
                switch ( cp.Name )
                {
                    case "x":
                        AutoExecute = true;
                        break;
                    case "VssDir":
                        VssDirectory = cp.Value;
                        break;
                    case "VssPrj":
                        VssProject = cp.Value;
                        break;
                    case "VssExcludes":
                        VssExcludePaths = cp.Value;
                        break;
                    case "GitDir":
                        GitDirectory = cp.Value;
                        break;
                    case "EmailDomain":
                        EmailDomain = cp.Value;
                        break;
                    case "LogFile":
                        LogFile = cp.Value;
                        break;
                    case "Cmt":
                        DefaultComment = cp.Value;
                        break;
                    case "Trans":
                        TranscodeCommentsUtf8 = true;
                        if ( !string.IsNullOrEmpty ( cp.Value ) && bool.TryParse (cp.Value, out b ) )
                        {
                            TranscodeCommentsUtf8 = b;
                        }
                        break;
                    case "Annotate":
                        ForceAnnotatedTags = true;
                        if ( !string.IsNullOrEmpty ( cp.Value ) && bool.TryParse ( cp.Value, out b ) )
                        {
                            ForceAnnotatedTags = b;
                        }
                        break;
                    case "IgnoreGitErr":
                        IgnoreGitErrors = true;
                        if ( !string.IsNullOrEmpty ( cp.Value ) && bool.TryParse ( cp.Value, out b ) )
                        {
                            IgnoreGitErrors = b;
                        }
                        break;
                    case "CombineAnySecs":
                        if ( !string.IsNullOrEmpty ( cp.Value ) && double.TryParse ( cp.Value, out d ) )
                        {
                            AnyCommentSeconds = d;
                        }
                        break;
                    case "CombineSameSecs":
                        if ( !string.IsNullOrEmpty ( cp.Value ) && double.TryParse ( cp.Value, out d ) )
                        {
                            SameCommentSeconds = d;
                        }
                        break;
                    case "Encoding":
                        DataEncoding = Encoding.GetEncoding ( cp.Value );
                        break;
                    case "?":
                    case "help":
                        // account for help requests
                        break;
                    default:
                        // unknown command line parameter, throw an error
                        throw new Exception ( "Invalid Command Line Parameter! (" + cp.ToString () + ")" );
                }
            }
        }

        /// <summary>Generate the help text for use in a message box</summary>
        /// <returns>Full string of help text</returns>
        public string GenerateHelpMsg ()
        {
            StringBuilder sb = new StringBuilder ( 2048 );
            sb.AppendLine ( string.Format ( "USAGE: {0} -[ParamName]:[Value]", AppDomain.CurrentDomain.FriendlyName ) );
            sb.AppendLine ( "" );
            sb.AppendLine ( string.Format ( "Example: {0} -x -VssDir:\\\\myserver\\myshare\\dev\\vss -VssPrj:$/MainEnv/App1 -EmailDomain:mycompany.com -GitDir:E:\\dev\\git -LogFile:E:\\dev\\Vss2Git.log", AppDomain.CurrentDomain.FriendlyName ) );
            sb.AppendLine ( "" );
            sb.AppendLine ( "Parameter Name\tUsage Description" );
            sb.AppendLine ( "=============================================" );
            sb.AppendLine ( "x\t\tAutoexecute (no u/i)" );
            sb.AppendLine ( "" );
            sb.AppendLine ( "VssDir\t\tThe sourcesafe database directory where the srcsafe.ini file is contained" );
            sb.AppendLine ( "" );
            sb.AppendLine ( "VssPrj\t\tThe sourcesafe project path" );
            sb.AppendLine ( "" );
            sb.AppendLine ( "VssExcludes\tOptional files to exclude" );
            sb.AppendLine ( "" );
            sb.AppendLine ( "GitDir\t\tOptional directory for the git repository, defaults to current directory" );
            sb.AppendLine ( "" );
            sb.AppendLine ( "EmailDomain\tThe email domain to use for usernames" );
            sb.AppendLine ( "" );
            sb.AppendLine ( "LogFile\t\tOptional file/path of the output log file" );
            sb.AppendLine ( "" );
            sb.AppendLine ( "Cmt\t\tOptional default comment to use for blank ones" );
            sb.AppendLine ( "" );
            sb.AppendLine ( "Trans\t\tOption to transcode comments to UTF-8" );
            sb.AppendLine ( "" );
            sb.AppendLine ( "Annotate\t\tOption to force use of annotated tag objects" );
            sb.AppendLine ( "" );
            sb.AppendLine ( "IgnoreGitErr\tOption to ignore errors from Git" );
            sb.AppendLine ( "" );
            sb.AppendLine ( "CombineAnySecs\tNumber of seconds between any revision to combine (Default 30)" );
            sb.AppendLine ( "" );
            sb.AppendLine ( "CombineSameSecs\tNumber of seconds between revisions with same comment to combine (Default 600)" );
            sb.AppendLine ( "" );
            return sb.ToString ();
        }

    }

}
